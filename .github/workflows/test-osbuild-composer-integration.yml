---
name: "osbuild-composer integration"

# PLEASE UPDATE THIS COMMENT IF ANY RELEVANT CHANGES ARE MADE TO THE WORKFLOW
#
# This workflow tests if an open PR breaks osbuild-composer's compatibility
# with images. If it does, it posts a message on the PR itself notifying the
# author and reviewers of this change. The workflow works as follows:
#
# 1. Checks out osbuild/osbuild-composer
# 2. Replaces the osbuild/images dependency with the *merge base* of the open
#    PR with main and runs osbuild-composer's unit tests.
# 3. Replaces the osbuild/images dependency with the *HEAD* of the open PR and
#    runs osbuild-composer's unit tests.
# 4. Posts a message on the open PR only if the unit tests on the merge base
#    (step 2) succeed and the unit tests on the PR HEAD (step 3) fail.
#
# Limitations:
# 1. This workflow runs on pull_request_target, which means it runs on the main
#    branch. Changes to this workflow in a PR will not affect the run for that
#    PR. Running on pull_request_target is needed to have access to repository
#    secrets (Schutzbot's GitHub token).
# 2. If the unit tests in this repository fail, the integration will fail and
#    the message will be posted (if the integration is not failing on the merge
#    base). This will happen even if there's no actual integration issue, so
#    the message can be misleading.
# 3. If a PR causes integration issues at first and is then fixed, the message
#    wont be removed. The message could be updated, using the
#    mshick/add-pr-comment@v2 action, but that would also mean that a comment
#    is posted even when everything is working, which might be annoying.


on:  # yamllint disable-line rule:truthy
  pull_request_target:
    branches:
      # skip test for backport branches since it doesn't make sense to test
      # those against osbuild-composer main
      - main

jobs:

  unit-tests:
    name: "ðŸ›ƒ Unit tests"
    runs-on: ubuntu-20.04
    container:
      image: registry.fedoraproject.org/fedora:latest
    outputs:
      # Define job outputs
      # (see https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs#example-defining-outputs-for-a-job)
      # One output for the test with the merge base and one for the test against
      # the PR
      base_test: ${{ steps.tests-base.outputs.base_test }}
      pr_test: ${{ steps.tests-pr.outputs.pr_test }}

    steps:
      # krb5-devel is needed to test internal/upload/koji package
      # gcc is needed to build the mock depsolver binary for the unit tests
      # gpgme-devel is needed for container upload dependencies
      - name: Install build and test dependencies
        run: dnf -y install krb5-devel gcc git-core go gpgme-devel osbuild-depsolve-dnf btrfs-progs-devel device-mapper-devel

      - name: Check out osbuild-composer main branch
        uses: actions/checkout@v4
        with:
          path: osbuild-composer
          repository: osbuild/osbuild-composer
          ref: main

      - name: Check out osbuild/images for the PR
        uses: actions/checkout@v4
        with:
          path: images
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Mark the working directory as safe for git
        run: git config --global --add safe.directory "$(pwd)"

      - name: Update the osbuild/images reference to the merge base with main
        env:
          merge_base_sha: ${{ github.event.pull_request.base.sha }}
        run: |
          cd osbuild-composer
          go mod edit -replace github.com/osbuild/images=github.com/achilleas-k/images-message-test@$merge_base_sha
          ./tools/prepare-source.sh

      - name: Run unit tests (merge base)
        working-directory: osbuild-composer
        id: tests-base
        # This step will not fail if the test fails, but it will write the
        # failure to GITHUB_OUTPUT
        run: |
          if go test -v -race ./...; then
            echo "base_test=1" >> $GITHUB_OUTPUT
          else
            echo "base_test=0" >> $GITHUB_OUTPUT
          fi

      - name: Update the osbuild/images reference to the PR HEAD
        env:
          pr_head: ${{ github.event.pull_request.hase.sha }}
        if: steps.tests-base.outputs.base_test == 1
        # Restore and clean the checkout and replace the dependency again using
        # images from the checkout above
        run: |
          cd osbuild-composer
          git restore .
          git clean -xfd .
          go mod edit -replace github.com/osbuild/images=../images
          ./tools/prepare-source.sh

      - name: Run unit tests (PR HEAD)
        id: tests-pr
        working-directory: osbuild-composer
        # This step will not fail if the test fails, but it will write the
        # failure to GITHUB_OUTPUT
        run: |
          if go test -v -race ./...; then
            echo "pr_test=1" >> $GITHUB_OUTPUT
          else
            echo "pr_test=0" >> $GITHUB_OUTPUT
          fi

  post-results:
    name: "Post notice"
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Create comment
        id: create-message
        env:
          base_test: ${{ needs.unit-tests.outputs.base_test }}
          pr_test: ${{ needs.unit-tests.outputs.pr_test }}
        # Create the appropriate comment (if necessary) to post on the PR
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#multiline-strings
        run: |
          if (( base_test == 1 )) && (( pr_test == 0 )); then
            {
              echo 'message<<EOF'
              echo This PR changes the images API or behaviour. The next update of the images dependency in osbuild-composer will need work to adapt to these changes.
              echo This is simply a notice. It will not block this PR from being merged.
              echo EOF
            } >> $GITHUB_OUTPUT
          fi

      - name: Add comment
        uses: mshick/add-pr-comment@v2
        # Use default token in this PR
        # repo-token: ${{ secrets.SCHUTZBOT_GITHUB_ACCESS_TOKEN }}
        if: steps.create-message.outputs.message != ''
        env:
          message: ${{ steps.create-message.outputs.message }}
        with:
          issue: ${{ github.event.pull_request.number }}
          message: ${{ env.message }}
